"""
    Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех
    уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
● выбрать хорошую задачу, которую имеет смысл оценивать по памяти (укажите какую задачу вы взяли в комментарии);
● написать 3 варианта кода (один у вас уже есть);
● проанализировать 3 варианта и выбрать оптимальный по суммарной затраченной памяти;
● результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
● написать общий вывод: какой из трёх вариантов лучше и почему.

В качестве задачи взял задание 8 из урока 2.
 Задание 8.
     Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел.
     Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.
"""
#
# ОС:  uname_result(system='Windows', node='DESKTOP-N8VMUKB', release='10', version='10.0.22000', machine='AMD64')
# Python: C:\Users\Oleg Gromov>python
# Python 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] on win32


import sys


def check_size(data):
    if hasattr(data, '__iter__'):
        if hasattr(data, 'items'):
            for key, value in data.items():
                check_size(key)
                check_size(value)
        elif not isinstance(data, str):
            for item in data:
                check_size(item)
    return sys.getsizeof(data)


# вариант решения задачи с кортежом.

my_num = (input("Введите цифру для поиска: "), input("Введите количество чисел: "))
count_number = 0

for i in range(int(my_num[1])):
    for j in (input(f'Введите число №{i + 1}: ')):
        if j == my_num[0]:
            count_number += 1

print(f'Цифра {my_num[0]} в введённых числах встречается {count_number} раз(а).')

# Проверяем размеры переменных

print(f'Размер занятой под переменные памяти равен'
      f' {check_size(my_num) + check_size(j) + check_size(i) + count_number} байт.')

# Введённые данные:
# Введите цифру для поиска: 2
# Введите количество чисел: 20
# Введите число №1: 1234567890098765432112345678900987654321
# Введите число №2: 1234567890098765432112345678900987654321
# Введите число №3: 1234567890098765432112345678900987654321
# Введите число №4: 1234567890098765432112345678900987654321
# Введите число №5: 1234567890098765432112345678900987654321
# Введите число №6: 1234567890098765432112345678900987654321
# Введите число №7: 1234567890098765432112345678900987654321
# Введите число №8: 1234567890098765432112345678900987654321
# Введите число №9: 1234567890098765432112345678900987654321
# Введите число №10: 1234567890098765432112345678900987654321
# Введите число №11: 1234567890098765432112345678900987654321
# Введите число №12: 1234567890098765432112345678900987654321
# Введите число №13: 1234567890098765432112345678900987654321
# Введите число №14: 1234567890098765432112345678900987654321
# Введите число №15: 1234567890098765432112345678900987654321
# Введите число №16: 1234567890098765432112345678900987654321
# Введите число №17: 1234567890098765432112345678900987654321
# Введите число №18: 1234567890098765432112345678900987654321
# Введите число №19: 1234567890098765432112345678900987654321
# Введите число №20: 1234567890098765432112345678900987654321
# Цифра 2 в введённых числах встречается 80 раз(а).
# Размер занятой под переменные памяти равен 214 байт.